.. _kotlin-fundamentals-bulkwrite:

===============
Bulk Operations
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use bulk operations in the
MongoDB Kotlin Driver. 

To perform a create, replace, update, or delete operation,
use its corresponding method. For example, to insert one document,
update multiple documents, and delete one document in your collection,
use the ``insertOne()``, ``updateMany()`` and ``deleteOne()`` methods. 

The ``MongoClient`` performs these operations by making a call for each
operation to the database. You can reduce the number of calls to the
database to one by using bulk operations. 

Performing Bulk Operations
--------------------------

Bulk operations consist of a large number of write operations. To perform
a bulk operation, pass a ``List`` of ``WriteModel`` documents  to the
``bulkWrite()`` method. A ``WriteModel`` is a model that represents any
of the write operations. 

The following sections show how to create and use each ``WriteModel``
document. The examples in each section contain the following documents
in a collection: 

.. code-block:: json

   { "_id": 1 }
   { "_id": 2 }

This data is modeled with the following Kotlin data class:

.. literalinclude:: /examples/generated/BulkTest.snippet.bulk-data-model.kt
   :language: kotlin

For more information about the methods and classes mentioned in this section,
see the following API Documentation:

- `bulkWrite() <{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-mongo-collection/bulk-write.html>`__
- `WriteModel <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/WriteModel.html>`__
- `BulkWriteOptions <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/BulkWriteOptions.html>`__

Insert Operation
~~~~~~~~~~~~~~~~

To perform an insert operation, create an ``InsertOneModel`` specifying
the document you want to insert. To insert multiple documents, you must
create an ``InsertOneModel`` for each document you want to insert.

Example
```````

The following example creates an ``InsertOneModel`` for two documents
where the ``_id`` values are "3" and "4": 

.. literalinclude:: /examples/generated/BulkTest.snippet.insert-one.kt
   :language: kotlin

.. important::

   When performing a ``bulkWrite()``, the ``InsertOneModel`` cannot
   insert a document with an ``_id`` that already exists in the
   collection. Instead, the method throws a ``MongoBulkWriteException``.

   The following example tries to insert two documents where the ``_id`` is
   "1" and "3":
   
   .. io-code-block::

      .. input:: /examples/generated/BulkTest.snippet.bulk-write-exception.kt
         :language:  kotlin

      .. output:: 
         :language:  console
         
         A MongoBulkWriteException occurred with the following message:  
         Bulk write operation error on server sample-shard-00-02.pw0q4.mongodb.net:27017. 
         Write errors: [BulkWriteError{index=0, code=11000, message='E11000 duplicate key 
         error collection: crudOps.bulkWrite index: _id_ dup key: { _id: 1 }', details={}}].

   To see why the document with the ``_id`` of "3" didn't insert, see
   the :ref:`Order of Execution <orderOfExecution>` section.

For more information about the methods and classes mentioned in this section,
see the `InsertOneModel <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/InsertOneModel.html>`__ API Documentation. 

Replace Operation
~~~~~~~~~~~~~~~~~

To perform a replace operation, create a ``ReplaceOneModel`` specifying
a query filter for the document you want to replace with the replacement
document. 

.. important::

   When performing a ``bulkWrite()``, the ``ReplaceOneModel`` cannot
   make changes to a document that violate unique index constraints on
   the collection, and the model does not replace a document if there
   are no matches to your query filter. 

Example
```````

The following example creates a ``ReplaceOneModel`` to
replace a document where the ``_id`` is "1" with a document that
contains an additional field: 

.. literalinclude:: /examples/generated/BulkTest.snippet.replace-one.kt
   :language: kotlin

For more information about the methods and classes mentioned in this section,
see the following resources:

- `ReplaceOneModel <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/ReplaceOneModel.html>`__ API Documentation
- :manual:`Unique indexes </core/index-unique/>` Server Manual Explanation

Update Operation
~~~~~~~~~~~~~~~~

To perform an update operation, create an ``UpdateOneModel`` or an
``UpdateManyModel`` specifying a query filter for documents you want to
update with what the updates are.

The ``UpdateOneModel`` updates the first document that matches your query
filter and the ``UpdateManyModel`` updates all the documents that
match your query filter. 

.. important::

   When performing a ``bulkWrite()``, the ``UpdateOneModel`` and
   ``UpdateManyModel`` cannot make changes to a document that violate
   unique index constraints on the collection, and the models do not
   update any documents if there are no matches to your query filter. 

Example
```````

The following example creates an ``UpdateOneModel`` to update
a document where the ``_id`` is "2" to a document that
contains an additional field: 

.. literalinclude:: /examples/generated/BulkTest.snippet.update-one.kt
   :language: java

For more information about the methods and classes mentioned in this section,
see the following resources:

- `UpdateOneModel <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/UpdateOneModel.html>`__ API Documentation
- `UpdateManyModel <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/UpdateManyModel.html>`__ API Documentation
- :manual:`unique indexes </core/index-unique/>` Server Manual Explanation

Delete Operation
~~~~~~~~~~~~~~~~

To perform a delete operation, create a ``DeleteOneModel`` or a
``DeleteManyModel`` specifying a query filter for documents you want to
delete. 

The ``DeleteOneModel`` deletes the first document that matches your query
filter and the ``DeleteManyModel`` deletes all the documents that
match your query filter. 

.. important::

   When performing a ``bulkWrite()``, the ``DeleteOneModel`` and
   ``DeleteManyModel`` do not delete any documents if there are no matches
   to your query filter. 

Example
```````

The following example creates a ``DeleteOneModel`` to delete
a document where the ``_id`` is "1":

.. literalinclude:: /examples/generated/BulkTest.snippet.delete.kt
   :language: kotlin

For more information about the methods and classes mentioned in this section,
see the following API Documentation:

- `DeleteOneModel <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/DeleteOneModel.html>`__
- `DeleteManyModel <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/DeleteManyModel.html>`__

.. _orderOfExecution:

Order of Execution
------------------

The ``bulkWrite()`` method accepts an optional ``BulkWriteOptions`` as
a second parameter to specify if you want to execute the bulk operations
as ordered or unordered. 

Ordered Execution
~~~~~~~~~~~~~~~~~

By default, the ``bulkWrite()`` method executes bulk operations in
order. This means that the bulk operations execute in the order you
added them to the list until an error occurs, if any. 

Example 
```````

The following example performs these bulk operations:

- An insert operation for a document where the ``_id`` is "3"
- A replace operation for a document where the ``_id`` is "1" with a document that contains an additional field
- An update operation for a document where the ``_id`` is "3" to a document that contains an additional field
- A delete operation for all documents that contain the field ``x`` with the value "2"

.. literalinclude:: /examples/generated/BulkTest.snippet.ordered.kt
   :language: kotlin

After running this example, your collection contains the following 
document:

.. code-block:: json
   :copyable: false
   
   { "_id": 2 }

Unordered Execution
~~~~~~~~~~~~~~~~~~~

You can also execute bulk operations in any order by specifying "false"
to the ``order()`` method on ``BulkWriteOptions``. This means that
all the write operations execute regardless of errors and if any errors occur
the bulk operation reports them at the end. 

Adding to the preceding example, including the following specifies the bulk
operations to execute in any order: 

.. literalinclude:: /examples/generated/BulkTest.snippet.unordered.kt
   :language: kotlin

.. note::

   Unordered bulk operations do not guarantee order of execution. The
   order may differ from the way you list them to optimize the runtime.
   
   In the preceding example, if the ``bulkWrite()`` method decided to
   perform the insert operation after the update operation, nothing
   changes with the update operation because the document does not exist
   at that point in time. Your collection then contains the following
   documents: 
   
   .. code-block:: json
      :copyable: false
   
      { "_id": 2 }
      { "_id": 3 }

For more information about the methods and classes mentioned in this section,
see the following API Documentation:

- `BulkWriteOptions <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/BulkWriteOptions.html>`__
- `ordered() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/BulkWriteOptions.html#ordered(boolean)>`__

Summary
-------

To perform a bulk operation, you create and pass a list of
``WriteModel`` documents to the ``bulkWrite()`` method. 

There are 6 different ``WriteModel`` documents: ``InsertOneModel``,
``ReplaceOneModel``, ``UpdateOneModel``, ``UpdateManyModel``,
``DeleteOneModel`` and ``DeleteManyModel``. 

There are two ways to execute the ``bulkWrite()`` method: 

- Ordered, which performs the bulk operations in order until an error occurs, if any
- Unordered, which performs all the bulk operations in any order and reports errors at the end, if any
